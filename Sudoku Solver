def is_valid(board, row, col, num):
    """
    Check if placing 'num' in board[row][col] is valid.
    """
    # Check if 'num' is not in the current row
    if num in board[row]:
        return False
    
    # Check if 'num' is not in the current column
    for r in range(9):
        if board[r][col] == num:
            return False

    # Check if 'num' is not in the current 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for r in range(start_row, start_row + 3):
        for c in range(start_col, start_col + 3):
            if board[r][c] == num:
                return False

    return True


def solve_sudoku(board):
    """
    Solve the Sudoku puzzle using backtracking.
    """
    # Find the first empty cell
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                # Try placing numbers 1-9 in the empty cell
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num  # Place the number

                        # Recur to solve the rest of the board
                        if solve_sudoku(board):
                            return True

                        # Backtrack if the number doesn't lead to a solution
                        board[row][col] = 0

                return False  # If no number is valid, backtrack

    return True  # All cells are filled, solution found


def print_board(board):
    """
    Print the Sudoku board in a readable format.
    """
    for row in board:
        print(" ".join(str(cell) if cell != 0 else "." for cell in row))



sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
]

print("Original Sudoku Board:")
print_board(sudoku_board)

if solve_sudoku(sudoku_board):
    print("\nSolved Sudoku Board:")
    print_board(sudoku_board)
else:
    print("\nNo solution exists.")
